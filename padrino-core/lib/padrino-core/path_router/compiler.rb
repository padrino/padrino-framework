module Padrino
  module PathRouter
    #
    # High performance engine for finding all routes which are matched with pattern
    #
    class Compiler
      # All regexps generated by recursive compiler
      attr_reader :regexps

      ##
      # Constructs an instance of Padrino::PathRouter::Compiler
      #
      def initialize(routes)
        @routes = routes
      end
  
      ##
      # Compiles all routes into regexps.
      #
      def compile!
        return if compiled?
        @regexps = @routes.map.with_index do |route, index|
          route.index = index
          /(?<_#{index}>#{route.matcher.to_regexp})/
        end
        @regexps = recursive_compile(@regexps)
        @compiled = true
      end

      ##
      # Returns true if all routes has been compiled.
      #
      def compiled?
        !!@compiled
      end
  
      ##
      # Finds routes by using request.
      #
      def find_by_request(request)
        rotation do |offset|
          if route = match?(offset, request.path_info)
            params = route.params_for(request.path_info, request.params)
            yield(route, params, offset) if route.verb == request.request_method.downcase.to_sym
            route
          end
        end
      end

      ##
      # Finds routes by using PATH_INFO.
      #
      def find_by_pattern(pattern)
        rotation { |offset| match?(offset, pattern) }
      end
  
      private

      ##
      # Returns a instance of PathRouter::Route if path is matched with current regexp
      #
      def match?(offset, path)
        current_regexp = @regexps[offset]
        return unless current_regexp === path || current_regexp === path[0..-2]
        @routes[offset..-1].detect{ |route| Regexp.last_match("_#{route.index}") }
      end

      ##
      # Runs through all regexps to find routes.
      #
      def rotation(offset = 0)
        compile! unless compiled?
        loop.with_object([]) do |_, candidacies|
          return candidacies unless route = yield(offset)
          candidacies << route
          offset = route.index.next
        end
      end

      ##
      # Compiles routes into regexp recursively.
      #
      def recursive_compile(regexps, paths = [])
        return paths if regexps.length.zero?
        paths << Regexp.union(regexps)
        regexps.shift
        recursive_compile(regexps, paths)
      end
    end
  end
end
