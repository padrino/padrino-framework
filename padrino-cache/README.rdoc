= Painless Page and Fragment Caching (padrino-cache)

== Overview

This component enables caching of an application's response contents on
both page- and fragment-levels. Output cached in this manner is
persisted, until it expires or is actively expired, in a configurable store
of your choosing. Several common caching stores are supported out of the box.

== Caching Quickstart

Padrino-cache can reduce the processing load on your site very effectively
with minimal configuration.

By default, the component caches pages in a file store at <tt>tmp/cache</tt>
within your project root. Entries in this store correspond directly
to the request issued to your server. In other words, responses are
cached based on request URL, with one cache entry per URL.

This behavior is referred to as "page-level caching." If this strategy meets
your needs, you can enable it very easily:

  # Basic, page-level caching
  class SimpleApp < Padrino::Application
    register Padrino::Cache
    enable :caching

    get '/foo', :cache => true do
      expires_in 30 # expire cached version at least every 30 seconds
      'Hello world'
    end
  end

You can also cache on a controller-wide basis:

  # Controller-wide caching example
  class SimpleApp < Padrino::Application
    register Padrino::Cache
    enable :caching

    get '/' do
      'Hello world'
    end

    # Requests to routes within '/admin'
    controller '/admin', :cache => true do
      expires_in 60

      get '/foo' do
        'Url is /admin/foo'
      end

      get '/bar' do
        'Url is /admin/bar'
      end

      post '/baz' do # We cache only GET and HEAD request
        'This will not be cached'
      end
    end
  end

You can also provide a custom <tt>cache_key</tt> in any route:

  class SimpleApp < Padrino::Application
    register Padrino::Cache
    enable :caching

    get '/post/:id', :cache => true do
      @post = Post.find(params[:id])
      cache_key :my_name
    end
  end

In this way you can manually expire cache with CachedApp.cache.delete(:my_name)
for example from the Post model after an update.

If you specify <tt>:cache => true</tt> but do not invoke <tt>expires_in</tt>,
the response will be cached indefinitely. Most of the time, you will want to
specify the expiry of a cache entry by <tt>expires_in</tt>. Even a relatively
low value--1 or 2 seconds--can greatly increase application efficiency, especially
when enabled on a very active part of your domain.

== Caching Store

You can set a global caching option or a per app caching options.

=== Global Caching Options

  Padrino.cache = Padrino::Cache::Store::Memcache.new(::Memcached.new('127.0.0.1:11211', :exception_retry_limit => 1))
  Padrino.cache = Padrino::Cache::Store::Memcache.new(::Dalli::Client.new('127.0.0.1:11211', :exception_retry_limit => 1))
  Padrino.cache = Padrino::Cache::Store::Mongo.new(::Mongo::Connection.new(...)
  Padrino.cache = Padrino::Cache::Store::Redis.new(::Redis.new(:host => '127.0.0.1', :port => 6379, :db => 0))
  Padrino.cache = Padrino::Cache::Store::Memory.new(50)
  Padrino.cache = Padrino::Cache::Store::File.new(/my/cache/path)

You can manage your cache from anywhere in your app:

  Padrino.cache.set('val', 'test')
  Padrino.cache.get('val') # => 'test'
  Padrino.cache.delete('val')
  Padrino.cache.flush

==== Application Caching Options

  set :cache, Padrino::Cache::Store::Memcache.new(::Memcached.new('127.0.0.1:11211', :exception_retry_limit => 1))
  set :cache, Padrino::Cache::Store::Memcache.new(::Dalli::Client.new('127.0.0.1:11211', :exception_retry_limit => 1))
  set :cache, Padrino::Cache::Store::Redis.new(::Redis.new(:host => '127.0.0.1', :port => 6379, :db => 0))
  set :cache, Padrino::Cache::Store::Mongo.new(::Mongo::Connection.new(...))
  set :cache, Padrino::Cache::Store::Memory.new(50)
  set :cache, Padrino::Cache::Store::File.new(Padrino.root('tmp', app_name, 'cache') # default choice

You can manage your cache from anywhere in your app:

  MyApp.cache.set('val', 'test')
  MyApp.cache.get('val') # => 'test'
  MyApp.cache.delete('val')
  MyApp.cache.flush

== Copyright

Copyright (c) 2011 Padrino. See LICENSE for details.
